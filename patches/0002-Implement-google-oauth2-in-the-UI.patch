From a924064750aea796f786e413629c901e9923bf98 Mon Sep 17 00:00:00 2001
From: Christian Simon <simon@swine.de>
Date: Thu, 18 Oct 2018 16:06:05 +0100
Subject: [PATCH 2/3] Implement google oauth2 in the UI

This allows a browser only login into Vault using Google's credential
backends.
---
 ui/app/adapters/auth-callback.js              | 16 ++++++++++++
 ui/app/adapters/cluster.js                    | 10 +++++++-
 ui/app/components/auth-form.js                | 25 ++++++++++++++++++-
 ui/app/controllers/vault/cluster.js           |  3 ++-
 ui/app/controllers/vault/cluster/auth.js      | 25 ++++++++++++++++++-
 ui/app/helpers/supported-auth-backends.js     |  8 ++++++
 ui/app/mixins/cluster-route.js                | 10 +++++---
 ui/app/models/auth-config/google.js           |  2 ++
 ui/app/router.js                              |  1 +
 ui/app/routes/vault/cluster/auth-callback.js  | 16 ++++++++++++
 ui/app/routes/vault/cluster/auth.js           |  8 +++++-
 ui/app/templates/components/auth-form.hbs     |  4 +--
 .../templates/partials/auth-form/google.hbs   |  0
 ui/app/templates/vault/cluster/auth.hbs       |  1 +
 14 files changed, 119 insertions(+), 10 deletions(-)
 create mode 100644 ui/app/adapters/auth-callback.js
 create mode 100644 ui/app/models/auth-config/google.js
 create mode 100644 ui/app/routes/vault/cluster/auth-callback.js
 create mode 100644 ui/app/templates/partials/auth-form/google.hbs

diff --git a/ui/app/adapters/auth-callback.js b/ui/app/adapters/auth-callback.js
new file mode 100644
index 000000000..3165e0ee7
--- /dev/null
+++ b/ui/app/adapters/auth-callback.js
@@ -0,0 +1,16 @@
+import ApplicationAdapter from './application';
+
+export default ApplicationAdapter.extend({
+  callbackAction(backend, callback) {
+    let url = '/v1/auth/google/login';
+    let options = {
+      unauthenticated: true,
+      data: {
+        state: callback.state,
+        role: 'hello',
+        code: callback.code,
+      }
+    };
+    return this.ajax(url, 'POST', options);
+  },
+});
diff --git a/ui/app/adapters/cluster.js b/ui/app/adapters/cluster.js
index 1ba1a2f6a..67a008190 100644
--- a/ui/app/adapters/cluster.js
+++ b/ui/app/adapters/cluster.js
@@ -112,10 +112,17 @@ export default ApplicationAdapter.extend({
     const { role, jwt, token, password, username, path } = data;
     const url = this.urlForAuth(backend, username, path);
     const verb = backend === 'token' ? 'GET' : 'POST';
+
+
     let options = {
       unauthenticated: true,
     };
-    if (backend === 'token') {
+    if (backend === 'google') {
+      const urlPrefix = path ? path : backend;
+      return this.ajax(`/v1/auth/${urlPrefix}/web_code_url`, 'GET', options).then(response => {
+        window.location.replace(response.data.url);
+      });
+    } else if (backend === 'token') {
       options.headers = {
         'X-Vault-Token': token,
       };
@@ -147,6 +154,7 @@ export default ApplicationAdapter.extend({
       ldap: `login/${encodeURIComponent(username)}`,
       okta: `login/${encodeURIComponent(username)}`,
       token: 'lookup-self',
+      google: 'login',
     };
     const urlSuffix = authURLs[authBackend];
     const urlPrefix = path && authBackend !== 'token' ? path : authBackend;
diff --git a/ui/app/components/auth-form.js b/ui/app/components/auth-form.js
index 2bb11b369..ed89ad2bb 100644
--- a/ui/app/components/auth-form.js
+++ b/ui/app/components/auth-form.js
@@ -30,11 +30,13 @@ export default Component.extend(DEFAULTS, {
   redirectTo: null,
   namespace: null,
   wrappedToken: null,
+  callback: null,
   // internal
   oldNamespace: null,
   didReceiveAttrs() {
     this._super(...arguments);
     let token = this.get('wrappedToken');
+    let callback = this.get('callback');
     let newMethod = this.get('selectedAuth');
     let oldMethod = this.get('oldSelectedAuth');
 
@@ -52,6 +54,9 @@ export default Component.extend(DEFAULTS, {
     if (token) {
       this.get('unwrapToken').perform(token);
     }
+    if (callback && callback.state && callback.code) {
+      this.get('handleCallback').perform(callback);
+    }
   },
 
   didRender() {
@@ -124,6 +129,19 @@ export default Component.extend(DEFAULTS, {
     return shownMethods.length ? shownMethods : BACKENDS;
   }),
 
+  handleCallback: task(function*(callback){
+    let adapter = this.get('store').adapterFor('auth-callback');
+    try {
+      let response = yield adapter.callbackAction(null, callback);
+      this.set('selectedAuth', 'token');
+      this.set('token', response.auth.client_token);
+      this.send('doSubmit');
+    } catch (e) {
+      this.set('callback', null);
+      this.set('error', `callback handle failed: ${e.errors[0]}`);
+    }
+  }),
+
   unwrapToken: task(function*(token) {
     // will be using the token auth method, so set it here
     this.set('selectedAuth', 'token');
@@ -156,7 +174,7 @@ export default Component.extend(DEFAULTS, {
     }
   }),
 
-  showLoading: or('isLoading', 'authenticate.isRunning', 'fetchMethods.isRunning', 'unwrapToken.isRunning'),
+  showLoading: or('isLoading', 'authenticate.isRunning', 'fetchMethods.isRunning', 'unwrapToken.isRunning', 'handleCallback.isRunning'),
 
   handleError(e) {
     this.set('loading', false);
@@ -222,6 +240,11 @@ export default Component.extend(DEFAULTS, {
       if (this.get('customPath') || get(backend, 'id')) {
         data.path = this.get('customPath') || get(backend, 'id');
       }
+
+      let callback = this.get('callback') || null;
+      if (callback) {
+          data = assign(data, callback)
+      }
       return this.authenticate.unlinked().perform(backend.type, data);
     },
   },
diff --git a/ui/app/controllers/vault/cluster.js b/ui/app/controllers/vault/cluster.js
index aaa180178..7f0f89b33 100644
--- a/ui/app/controllers/vault/cluster.js
+++ b/ui/app/controllers/vault/cluster.js
@@ -55,7 +55,8 @@ export default Controller.extend({
       if (
         this.activeClusterName &&
         this.auth.currentToken &&
-        this.router.currentRouteName !== 'vault.cluster.auth'
+        this.router.currentRouteName !== 'vault.cluster.auth' &&
+        this.router.currentRouteName !== 'vault.cluster.auth-callback'
       ) {
         return true;
       }
diff --git a/ui/app/controllers/vault/cluster/auth.js b/ui/app/controllers/vault/cluster/auth.js
index 8036a9eee..be74896ca 100644
--- a/ui/app/controllers/vault/cluster/auth.js
+++ b/ui/app/controllers/vault/cluster/auth.js
@@ -1,5 +1,6 @@
 import { inject as service } from '@ember/service';
 import { alias } from '@ember/object/computed';
+import { computed } from '@ember/object';
 import Controller, { inject as controller } from '@ember/controller';
 import { task, timeout } from 'ember-concurrency';
 
@@ -8,10 +9,32 @@ export default Controller.extend({
   clusterController: controller('vault.cluster'),
   namespaceService: service('namespace'),
   namespaceQueryParam: alias('clusterController.namespaceQueryParam'),
-  queryParams: [{ authMethod: 'with' }],
+  queryParams: [
+      { authMethod: 'with' },
+      { callbackState: 'state'},
+      { callbackScope: 'scope'},
+      { callbackCode: 'code'},
+  ],
   wrappedToken: alias('vaultController.wrappedToken'),
   authMethod: '',
   redirectTo: null,
+  callback: false,
+  callbackState: null,
+  callbackScope: null,
+  callbackCode: null,
+  mountPath: null,
+
+  callbackInfo: computed(function() {
+      if (! this.get('callback')) {
+        return null;
+      }
+      return {
+          mountPath: this.get('mountPath'),
+          state: this.get('callbackState'),
+          scope: this.get('callbackScope'),
+          code: this.get('callbackCode'),
+      };
+  }),
 
   updateNamespace: task(function*(value) {
     // debounce
diff --git a/ui/app/helpers/supported-auth-backends.js b/ui/app/helpers/supported-auth-backends.js
index 85628915f..9973669e4 100644
--- a/ui/app/helpers/supported-auth-backends.js
+++ b/ui/app/helpers/supported-auth-backends.js
@@ -57,6 +57,14 @@ const SUPPORTED_AUTH_BACKENDS = [
     displayNamePath: ['metadata.org', 'metadata.username'],
     formAttributes: ['token'],
   },
+  {
+    type: 'google',
+    typeDisplay: 'Google',
+    description: 'Google Apps Login.',
+    tokenPath: 'client_token',
+    displayNamePath: 'metadata.username',
+    formAttributes: [],
+  },
 ];
 
 export function supportedAuthBackends() {
diff --git a/ui/app/mixins/cluster-route.js b/ui/app/mixins/cluster-route.js
index 9b814c99e..d0ca7569b 100644
--- a/ui/app/mixins/cluster-route.js
+++ b/ui/app/mixins/cluster-route.js
@@ -5,11 +5,12 @@ import RSVP from 'rsvp';
 const INIT = 'vault.cluster.init';
 const UNSEAL = 'vault.cluster.unseal';
 const AUTH = 'vault.cluster.auth';
+const AUTH_CALLBACK = 'vault.cluster.auth-callback';
 const CLUSTER = 'vault.cluster';
 const OIDC_CALLBACK = 'vault.cluster.oidc-callback';
 const DR_REPLICATION_SECONDARY = 'vault.cluster.replication-dr-promote';
 
-export { INIT, UNSEAL, AUTH, CLUSTER, DR_REPLICATION_SECONDARY };
+export { INIT, UNSEAL, AUTH, AUTH_CALLBACK, CLUSTER, DR_REPLICATION_SECONDARY };
 
 export default Mixin.create({
   auth: service(),
@@ -23,8 +24,8 @@ export default Mixin.create({
     return RSVP.resolve();
   },
 
-  beforeModel() {
-    return this.transitionToTargetRoute();
+  beforeModel(transition) {
+    return this.transitionToTargetRoute(transition);
   },
 
   clusterModel() {
@@ -42,6 +43,9 @@ export default Mixin.create({
   targetRouteName(transition) {
     const cluster = this.clusterModel();
     const isAuthed = this.authToken();
+    if (!isAuthed && transition && transition.targetName == AUTH_CALLBACK) {
+      return null;
+    }
     if (get(cluster, 'needsInit')) {
       return INIT;
     }
diff --git a/ui/app/models/auth-config/google.js b/ui/app/models/auth-config/google.js
new file mode 100644
index 000000000..66657e064
--- /dev/null
+++ b/ui/app/models/auth-config/google.js
@@ -0,0 +1,2 @@
+import AuthConfig from '../auth-config';
+export default AuthConfig.extend({});
diff --git a/ui/app/router.js b/ui/app/router.js
index b1b87d879..15e530f48 100644
--- a/ui/app/router.js
+++ b/ui/app/router.js
@@ -10,6 +10,7 @@ Router.map(function() {
   this.route('vault', { path: '/' }, function() {
     this.route('cluster', { path: '/:cluster_name' }, function() {
       this.route('oidc-callback', { path: '/auth/*auth_path/oidc/callback' });
+      this.route('auth-callback', { path: '/auth/:auth_method/callback/:mount_path'});
       this.route('auth');
       this.route('init');
       this.route('logout');
diff --git a/ui/app/routes/vault/cluster/auth-callback.js b/ui/app/routes/vault/cluster/auth-callback.js
new file mode 100644
index 000000000..21f3ad89a
--- /dev/null
+++ b/ui/app/routes/vault/cluster/auth-callback.js
@@ -0,0 +1,16 @@
+import ClusterRouteBase from './cluster-route-base';
+
+export default ClusterRouteBase.extend({
+    beforeModel() {
+        const params = this.paramsFor(this.routeName);
+        if (params.auth_method === 'google') {
+            this.transitionTo(
+                'vault.cluster.auth',
+                {
+                    queryParams: { authMethod: params.auth_method },
+                },
+            );
+        }
+        this.transitionTo('vault.cluster.auth');
+    },
+});
diff --git a/ui/app/routes/vault/cluster/auth.js b/ui/app/routes/vault/cluster/auth.js
index 2ac997372..d0a3bef46 100644
--- a/ui/app/routes/vault/cluster/auth.js
+++ b/ui/app/routes/vault/cluster/auth.js
@@ -6,6 +6,7 @@ export default ClusterRouteBase.extend({
   queryParams: {
     authMethod: {
       replace: true,
+      refreshModel: true
     },
   },
   flashMessages: service(),
@@ -16,7 +17,12 @@ export default ClusterRouteBase.extend({
       return this.get('version').fetchFeatures();
     });
   },
-  model() {
+  model(params) {
+    if (params.authMethod === 'google') {
+        let controller = this.controllerFor(this.routeName)
+        controller.set('callback', true);
+        controller.set('mountPath', params.mount_path);
+    }
     return this._super(...arguments);
   },
   resetController(controller) {
diff --git a/ui/app/templates/components/auth-form.hbs b/ui/app/templates/components/auth-form.hbs
index 22ca15e94..432ce6781 100644
--- a/ui/app/templates/components/auth-form.hbs
+++ b/ui/app/templates/components/auth-form.hbs
@@ -10,7 +10,7 @@
       {{#each methodsToShow as |method|}}
         {{#with (or method.path method.type) as |methodKey|}}
             <li class="{{if (and selectedAuthIsPath (eq (or selectedAuthBackend.path selectedAuthBackend.type) methodKey)) 'is-active' ''}}" data-test-auth-method>
-              {{#link-to 'vault.cluster.auth' cluster.name (query-params with=methodKey) data-test-auth-method-link=method.type}}
+              {{#link-to 'vault.cluster.auth' cluster.name (query-params with=methodKey state=null code=null scope=null) data-test-auth-method-link=method.type}}
                 {{or method.id (capitalize method.type)}}
               {{/link-to}}
             </li>
@@ -18,7 +18,7 @@
       {{/each}}
       {{#if hasMethodsWithPath}}
         <li class="{{if (not selectedAuthIsPath) 'is-active' ''}}" data-test-auth-method>
-          {{#link-to 'vault.cluster.auth' cluster.name (query-params with='token') data-test-auth-method-link="other"}}
+          {{#link-to 'vault.cluster.auth' cluster.name (query-params with='token' state=null code=null scope=null) data-test-auth-method-link="other"}}
             Other
           {{/link-to}}
         </li>
diff --git a/ui/app/templates/partials/auth-form/google.hbs b/ui/app/templates/partials/auth-form/google.hbs
new file mode 100644
index 000000000..e69de29bb
diff --git a/ui/app/templates/vault/cluster/auth.hbs b/ui/app/templates/vault/cluster/auth.hbs
index 45d83012d..476e44e1c 100644
--- a/ui/app/templates/vault/cluster/auth.hbs
+++ b/ui/app/templates/vault/cluster/auth.hbs
@@ -36,6 +36,7 @@
       @namespace={{namespaceQueryParam}}
       @redirectTo={{redirectTo}}
       @selectedAuth={{authMethod}}
+      @callback={{callbackInfo}}
       />
   </Page.content>
   <Page.footer>
-- 
2.20.1

